{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","key","id","onClick","value","onClickCallback","Board","squareList","squares","flat","map","square","generateSquareComponents","console","log","generateSquares","currentId","row","push","col","App","useState","setSquares","mark","setMark","winner","setWinner","checkForWinner","threeX","threeO","rowValues","colValues","diagValues","diag","arrayEquals","one","two","JSON","stringify","every","setSquareValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0997b39e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {  \n  return <button\n    className=\"square\" \n    key={props.id} \n    onClick={() => {\n      if (props.value === '') props.onClickCallback(props.id); // will not overwrite if square already has 'X' or 'O'\n    }} \n  >\n    {props.value}\n  </button>\n};\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  return squares.flat().map(square => \n    <Square \n      id={square.id} \n      value={square.value} \n      onClickCallback={onClickCallback}\n    />\n  );\n};\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  console.log(squareList);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n};\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'X';\nconst PLAYER_2 = 'O';\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row++) {\n    squares.push([]);\n    for (let col = 0; col < 3; col++) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId++;\n    };\n  };\n\n  return squares;\n};\n\nconst App = () => {\n\n  const [squares, setSquares] = useState(generateSquares());\n  const [mark, setMark] = useState(PLAYER_1);\n  const [winner, setWinner] = useState('...');\n\n  const togglePlayer = () => {\n    (mark === PLAYER_1) ? setMark(PLAYER_2) : setMark(PLAYER_1);\n  }; // helper function that toggles 'X' or 'O'\n\n  const setSquareValue = (id) => {\n    if (id >= 0 && id <= 2) {\n      squares[0][id].value = mark; // if square is in row 1\n    } else if (id >= 3 && id <= 5) {\n      squares[1][id-3].value = mark; // if square is in row 2\n    } else if (id >= 6 && id <= 8) {\n      squares[2][id-6].value = mark; // if square is in row 3\n    };\n  }; // helper function that changes the value in place\n\n  const onClickCallback = (id) => {\n    if (winner !== '...') return; // ceases the board from responding to clicks if there's a winner\n    setSquareValue(id);\n    setSquares(squares); // updates the board\n    checkForWinner();\n    togglePlayer();\n  };\n\n  const checkForWinner = () => {\n    const threeX = ['X', 'X', 'X'];\n    const threeO = ['O', 'O', 'O'];\n\n    const rowValues = (row) => {\n      return row.map(square => square.value);\n    }; // helper function for creating an array of row values\n\n    const colValues = (col) => {\n      switch (col) {\n        case 1:\n          return [squares[0][0].value, squares[1][0].value, squares[2][0].value];\n        case 2:\n          return [squares[0][1].value, squares[1][1].value, squares[2][1].value];\n        case 3:\n          return [squares[0][2].value, squares[1][2].value, squares[2][2].value];\n        default:\n          break;\n      };\n    }; // helper function for creating an array of column values\n\n    const diagValues = (diag) => {\n      return (diag === 1) ? [squares[0][0].value, squares[1][1].value, squares[2][2].value] : [squares[2][0].value, squares[1][1].value, squares[0][2].value];\n    }; // helper function for creating an array of diagonal values\n  \n    const arrayEquals = (one, two) => {\n      return JSON.stringify(one) === JSON.stringify(two); \n    }; // helper function from Chelsea's solution posted in the C13 Slack #classroom-support channel\n\n    if ( // win conditions for X\n      arrayEquals(rowValues(squares[0]), threeX) || // row 1\n      arrayEquals(rowValues(squares[1]), threeX) || // row 2\n      arrayEquals(rowValues(squares[2]), threeX) || // row 3\n      arrayEquals(colValues(1), threeX) || // column 1\n      arrayEquals(colValues(2), threeX) || // column 2 \n      arrayEquals(colValues(3), threeX) || // column 3\n      arrayEquals(diagValues(1), threeX) || // falling diagonal\n      arrayEquals(diagValues(2), threeX) // rising diagonal\n      ) {\n      setWinner(PLAYER_1); \n      \n    } else if ( // win conditions for O\n      arrayEquals(rowValues(squares[0]), threeO) || // row 1\n      arrayEquals(rowValues(squares[1]), threeO) || // row 2\n      arrayEquals(rowValues(squares[2]), threeO) || // row 3\n      arrayEquals(colValues(1), threeO) || // column 1\n      arrayEquals(colValues(2), threeO) || // column 2 \n      arrayEquals(colValues(3), threeO) || // column 3\n      arrayEquals(diagValues(1), threeO) || // falling diagonal\n      arrayEquals(diagValues(2), threeO) // rising diagonal\n      ) {\n      setWinner(PLAYER_2); \n    \n    } else if (squares.flat().every(square => square.value !== '')) { \n      setWinner('TIE'); // does not trigger until every square has been filled\n    };\n  };\n\n  const resetGame = () => {\n    setSquares(generateSquares());\n    setMark(PLAYER_1);\n    setWinner('...');\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>The winner is {winner}</h2>\n        <button className=\"reset\" onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={onClickCallback} />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}